C:\Users\yoges>scala
Welcome to Scala 2.13.10 (Java HotSpot(TM) 64-Bit Server VM, Java 1.8.0_251).
Type in expressions for evaluation. Or try :help.
--------------------------------------------------------------------------------
scala> :help
All commands can be abbreviated, e.g., :he instead of :help.
:help [command]          print this summary or command-specific help
:completions <string>    output completions for the given string
:imports [name name ...] show import history, identifying sources of names
:implicits [-v]          show the implicits in scope
:javap <path|class>      disassemble a file or class name
:line <id>|<line>        place line(s) at the end of history
:load <path>             interpret lines in a file
:paste [-raw] [path]     enter paste mode or paste a file
:power                   enable power user mode
:quit                    exit the REPL
:replay [options]        reset the REPL and replay all previous commands
:require <path>          add a jar to the classpath
:reset [options]         reset the REPL to its initial state, forgetting all session entries
:save <path>             save replayable session to a file
:sh <command line>       run a shell command (result is implicitly => List[String])
:settings <options>      update compiler options, if possible; see reset
:silent                  disable/enable automatic printing of results
:type [-v] <expr>        display the type of an expression without evaluating it
:kind [-v] <type>        display the kind of a type. see also :help kind
:warnings                show the suppressed warnings from the most recent line which had any

Useful default key bindings:
  TAB           code completion
  CTRL-ALT-T    show type at cursor, hit again to show code with types/implicits inferred.
---------------------------------------------------------------------------------
scala> println("Hello, Scala!");
Hello, Scala!
---------------------------------------------------------------------------------
scala> val i=10;
val i: Int = 10

scala> i=2.5;
        ^
       error: reassignment to val

scala> i=220;
        ^
       error: reassignment to val

scala> var j=20;
var j: Int = 20

scala> var k='YK'
                ^
       error: unclosed character literal (or use " for string literal "YK")

scala> var k="YK"
             ^
       warning: symbol literal is deprecated; use Symbol("YK") instead
var k: String = YK
---------------------------------------------------------------------------------
scala> var u=k.toInt()
                    ^
       error: Int does not take parameters

scala> var u=k.Int
               ^
       error: value Int is not a member of String

scala> k
val res4: String = YK

scala> k="20"
// mutated k

scala> var u=k.toInt
var u: Int = 20
---------------------------------------------------------------------------------
scala> object ScalaExample={
		def main(args:Array[String]){
			println("Hello Scala")
		}
	}
---------------------------------------------------------------------------------
Boolean Example:
---------------
object datatypesExample{
def main(args:Array[String])={
var i=true;
println(i)

}
}
------
D:\SCALA>scala Scala_Boolean.scala
true

---------------------------------------------------------------------------------
Program:
--------
object datatypesExample{
def main(args:Array[String])={
var i:short=32755;
i=36777
println(i)

}
-------------------------
D:\SCALA>scala Scala_Example.scala
Scala_Example.scala:3: error: not found: type short
var i:short=32755;
      ^

---------------------------------------------------------------------------------
Datatypes SHORT/LONG/INT:
-------------------------
object datatypesExample{
def main(args:Array[String])={
var i:short=32755;
//i=32755
println(i)
var j:Int=2147483645
//j=2147483645
println(j)
var k:long=9223372036854775000
//k=9223372036854775000
println(k)
}
}
-------------------------------
D:\SCALA>scala Scala_Datatypes.scala
Scala_Datatypes.scala:9: error: integer number too large
var k:long=9223372036854775000
           ^
D:\SCALA>scala Scala_Datatypes.scala
Scala_Datatypes.scala:9: error: integer number too large
var k:long=9223372036854775807
           ^

D:\SCALA>scala Scala_Datatypes.scala
Scala_Datatypes.scala:9: error: integer number too large
var k:long=922337203685477580
           ^

D:\SCALA>scala Scala_Datatypes.scala
Scala_Datatypes.scala:9: error: integer number too large
var k:long=92233720368547758
           ^
--------------------------------------------------------------------------
object datatypesExample{
def main(args:Array[String])={
var i:short=32755;
//i=32767
println(i)
var j:Int=2147483645
//j=2147483647
println(j)
var k:long=922337203685477500l
//k=9223372036854775807
println(k)

var l:Float=32.2777777777777777777777777777777777777777777f
println(l)

var m:Double=32.255555555555555555555555555555555555555555555555
println(m)

}
}
-----------------------
D:\SCALA>scala Datatypes.scala
Datatypes.scala:3: error: not found: type short
var i:short=32755;
      ^
Datatypes.scala:9: error: not found: type long
var k:long=922337203685477500l
      ^

---------------------------------------------------------------------------------
Take Student name and marks of 6 subjects then take it's percentage:
--------------------------------------------------------------------
Program:
--------
object StudentData{
def main(args:Array[String])=
{
	var name = args(0)
	var one = args(1).toInt
	var two = args(2).toInt
	var three = args(3).toInt
	var four = args(4).toInt
	var five = args(5).toInt
	var six = args(6).toInt
	val percentage = (one+two+three+four+five+six)/6;
println(percentage)
}
}
----------------------------------------------------------
D:\SCALA>scala StudentData xyz 99 88 77 66 55 89
No such file or class on classpath: StudentData

D:\SCALA>scala StudentData.scala xyz 99 88 77 66 55 89
StudentData.scala:11: error: value / is not a member of String
        val percentage = (args(1)+args(2)+args(3)+args(4)+args(5)+args(6)) * 100 / 600

         ^

D:\SCALA>scala StudentData.scala xyz 99 88 77 66 55 89
StudentData.scala:11: error: value / is not a member of String
        val percentage = (args(1)+args(2)+args(3)+args(4)+args(5)+args(6))/600*100

  ^

D:\SCALA>scala StudentData.scala xyz 99 88 77 66 55 89
StudentData.scala:11: error: value / is not a member of String
        val percentage = (args(1)+args(2)+args(3)+args(4)+args(5)+args(6))/6;

  ^

D:\SCALA>scala StudentData.scala xyz 99 88 77 66 55 89
StudentData.scala:11: error: value / is not a member of String
        val percentage = (args(1)+args(2)+args(3)+args(4)+args(5)+args(6))/6;

  ^

D:\SCALA>scala StudentData.scala xyz 99 88 77 66 55 89
79
D:\SCALA>scala StudentData.scala xyz 99 88 77 66 55 89
xyzpercentage is 79

D:\SCALA>scala StudentData.scala xyz 99 88 77 66 55 89
xyz percentage is 79

---------------------------------------------------------------------------------
Percentage using Loop in scala:
-------------------------------
def main(args:Array[String])=
{
	var name = args(0)
	var ans =0
	for( i <- 1 to 6)
	{
		ans +=args(i).toInt
		
	}
	
	val percentage = (ans)/6;
println(percentage)
}
}
----------------------------------
D:\SCALA>scala Loop_Percentage.scala xyz 99 88 77 66 55 89
4

D:\SCALA>scala Loop_Percentage.scala xyz 99 88 77 66 55 89
java.lang.ArrayIndexOutOfBoundsException: 7
        at Main$.$anonfun$main$1(Loop_Percentage.scala:8)
        at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:190)
        at Main$.main(Loop_Percentage.scala:6)
        at Main.main(Loop_Percentage.scala)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.lang.reflect.Method.invoke(Method.java:498)
        at scala.reflect.internal.util.RichClassLoader$.$anonfun$run$extension$1(ScalaClassLoader.scala:101)
        at scala.reflect.internal.util.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)
        at scala.tools.nsc.CommonRunner.run(ObjectRunner.scala:30)
        at scala.tools.nsc.CommonRunner.run$(ObjectRunner.scala:28)
        at scala.tools.nsc.ObjectRunner$.run(ObjectRunner.scala:45)
        at scala.tools.nsc.CommonRunner.runAndCatch(ObjectRunner.scala:37)
        at scala.tools.nsc.CommonRunner.runAndCatch$(ObjectRunner.scala:36)
        at scala.tools.nsc.AbstractScriptRunner.runCompiled(ScriptRunner.scala:168)
        at scala.tools.nsc.AbstractScriptRunner.$anonfun$runScript$1(ScriptRunner.scala:177)
        at scala.tools.nsc.AbstractScriptRunner.$anonfun$withCompiledScript$9(ScriptRunner.scala:154)
        at scala.tools.nsc.util.package$.waitingForThreads(package.scala:55)
        at scala.tools.nsc.AbstractScriptRunner.runScript(ScriptRunner.scala:151)
        at scala.tools.nsc.MainGenericRunner.runTarget$1(MainGenericRunner.scala:74)
        at scala.tools.nsc.MainGenericRunner.run$1(MainGenericRunner.scala:91)
        at scala.tools.nsc.MainGenericRunner.process(MainGenericRunner.scala:103)
        at scala.tools.nsc.MainGenericRunner$.main(MainGenericRunner.scala:108)
        at scala.tools.nsc.MainGenericRunner.main(MainGenericRunner.scala)

D:\SCALA>scala Loop_Percentage.scala xyz 99 88 77 66 55 89
79
---------------------------------------------------------------------------------
If and else condition:
----------------------
object test{
def main(args:Array[String])={
var name:String = args(0)
var one:Int = args(1).toInt
var two:Int = args(2).toInt
var three:Int = args(3).toInt
var four:Int = args(4).toInt
var five:Int = args(5).toInt
var six:Int = args(6).toInt
val total = (one+two+three+four+five+six);
println(total)

var percentage=(total)/6;
println(percentage)

if(percentage>90.0f){
println("First Class")
}
else if(percentage > 80.0f){
println("Second Class")
}
else if(percentage > 70.0f){
println("Third Class")
}
else if(percentage < 33.0f){
println("Fail")
}
else{
	println("pass");
	}
}
}
--------------------------------
D:\SCALA>scala Conditional_Statement.scala xyz 99 88 77 66 55 89
Conditional_Statement.scala:17: error: not found: value fail
        fail;
        ^
Conditional_Statement.scala:20: error: not found: value pass
        pass;
        ^

D:\SCALA>scala Conditional_Statement.scala xyz 99 88 77 66 55 89
Conditional_Statement.scala:17: error: not found: value fail
        fail
        ^
Conditional_Statement.scala:20: error: not found: value pass
        pass
        ^

D:\SCALA>scala Conditional_Statement.scala xyz 99 88 77 66 55 89
Conditional_Statement.scala:17: error: not found: value fail
        println(fail);
                ^
Conditional_Statement.scala:20: error: not found: value pass
        println(pass);
                ^

D:\SCALA>scala Conditional_Statement.scala xyz 99 88 77 66 55 89
474
79
Third Class
---------------------------------------------------------------------------------

